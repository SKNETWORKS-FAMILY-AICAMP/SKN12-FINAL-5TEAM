// App 컴포넌트
function App() {
  const [interviewState, setInterviewState] = useState('idle'); // idle, initialQuestion, answering, feedbackAndChunsikIntro, subsequentQuestion, finished
  const [activePlayerIndex, setActivePlayerIndex] = useState(null);
  const [activeTtsPlayerIndex, setActiveTtsPlayerIndex] = useState(null); // TTS 활성화 플레이어 인덱스
  const audioRef = useRef(new Audio('https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3')); // 샘플 오디오 URL (배경 음악용)

  // TTS 재생을 위한 헬퍼 함수
  const speakTTS = (text, playerIndex, onEndCallback) => {
    if (!text) return;
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ko-KR';
    utterance.onstart = () => {
      console.log(`TTS started for player ${playerIndex}: "${text}"`);
      setActiveTtsPlayerIndex(playerIndex);
    };
    utterance.onend = () => {
      console.log(`TTS ended for player ${playerIndex}: "${text}"`);
      setActiveTtsPlayerIndex(null);
      if (onEndCallback) {
        onEndCallback();
      }
    };
    utterance.onerror = (event) => {
      console.error("TTS error:", event.error);
      setActiveTtsPlayerIndex(null); // 에러 시 테두리 비활성화
      if (onEndCallback) {
        onEndCallback(); // 에러 발생 시에도 다음 단계로 진행
      }
    };
    window.speechSynthesis.speak(utterance);
  };

  // interviewState와 activePlayerIndex에 따라 오디오 및 TTS 재생 제어
  useEffect(() => {
    console.log("interviewState changed to:", interviewState);
    if (interviewState === 'initialQuestion' || interviewState === 'feedbackAndChunsikIntro' || interviewState === 'subsequentQuestion') {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      window.speechSynthesis.cancel(); // 이전 TTS 중지

      if (interviewState === 'initialQuestion') {
        setActivePlayerIndex(1); // 중앙 영상 활성화
        speakTTS('자기소개 해주세요.', 1, () => {
          // 초기 질문 TTS가 끝나면 바로 답변 상태로 전환
          setInterviewState('answering');
          setActivePlayerIndex(null);
        });
      } else if (interviewState === 'feedbackAndChunsikIntro') {
        // LLM 통합 이전의 로직 (피드백 및 춘식이 소개)
        speakTTS('잘 들었습니다. 다음은 춘식씨 자기소개해주세요.', 1, () => {
          speakTTS('안녕하세요. 춘식이입니다.', 3, () => {
            console.log("Transitioning to subsequentQuestion after Chunsik intro.");
            setInterviewState('subsequentQuestion');
          });
        });

      } else if (interviewState === 'subsequentQuestion') {
        setActivePlayerIndex(1); // 중앙 영상 활성화
        speakTTS('다음 질문입니다. 답변해주세요.', 1, () => {
          // 다음 질문 TTS가 끝나면 답변 상태로 전환
          setInterviewState('answering');
          setActivePlayerIndex(null);
        });
      }

    } else {
      console.log("Not in questioning state, stopping TTS and resetting.");
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      window.speechSynthesis.cancel(); // TTS 중지
      setActiveTtsPlayerIndex(null); // TTS 중지 시 테두리 비활성화
      setActivePlayerIndex(null); // 비활성화
    }
  }, [interviewState]);

  const handleSilenceDetected = () => {
    console.log("handleSilenceDetected called. Current interviewState:", interviewState);
    if (interviewState === 'answering') {
      setInterviewState('feedbackAndChunsikIntro');
      setActivePlayerIndex(null);
    }
  };

  const handleStart = () => {
    console.log("handleStart called.");
    setInterviewState('initialQuestion');
  };

  const handleEndAnswer = () => {
    console.log("handleEndAnswer called. Current interviewState:", interviewState);
    if (interviewState === 'answering') {
      setInterviewState('feedbackAndChunsikIntro');
      setActivePlayerIndex(null);
    }
  };

  const handleStop = () => {
    console.log("handleStop called.");
    setInterviewState('idle');
    setActivePlayerIndex(null);
    setActiveTtsPlayerIndex(null);
  };

  const handleVideoFinished = () => {
    console.log("handleVideoFinished called. Current activePlayerIndex:", activePlayerIndex);
    // VideoPlayer는 이제 5초 재생 후 onFinished를 호출하지 않음. TTS가 타이밍을 제어.
  };

  return (
    <div className="app-container">
      <div className="row">
        <VideoPlayer 
          isActive={activePlayerIndex === 0 || activeTtsPlayerIndex === 0} 
          onFinished={handleVideoFinished} 
          displayText={interviewState === 'subsequentQuestion' ? '다음 질문입니다. 답변해주세요.' : 'Video Player'}
        />
        <VideoPlayer 
          isActive={activePlayerIndex === 1 || activeTtsPlayerIndex === 1} 
          onFinished={handleVideoFinished} 
          displayText={interviewState === 'initialQuestion' ? '자기소개 해주세요.' : (interviewState === 'feedbackAndChunsikIntro' ? '잘 들었습니다. 다음은 춘식씨 자기소개해주세요.' : (interviewState === 'subsequentQuestion' ? '다음 질문입니다. 답변해주세요.' : 'Video Player'))}
        />
        <VideoPlayer isActive={false} onFinished={() => {}} displayText="Video Player" />
      </div>
      <div className="row">
        <Webcam isActive={interviewState === 'answering'} setAppInterviewState={setInterviewState} />
        <div className="button-container">
          <button onClick={handleStart} disabled={interviewState !== 'idle'}>면접 시작</button>
          <button onClick={handleEndAnswer} disabled={interviewState !== 'answering'}>대답 종료</button>
          <button onClick={handleStop} disabled={interviewState === 'idle'}>면접 종료</button>
        </div>
        <VideoPlayer 
          isActive={activeTtsPlayerIndex === 3} 
          onFinished={() => {}} 
          displayText={interviewState === 'feedbackAndChunsikIntro' ? '안녕하세요. 춘식이입니다.' : 'Video Player'}
        />
      </div>
    </div>
  );
}

export default App;
